import * as yup from 'yup';
import { questionSchema } from '../question';
import { setbackThresholdMixin } from '../question/utils/setbackThreshold';
import { optionalStringArray } from '../utils/array';
import { objectOf, optionalObjectOf } from '../utils/objectOf';
import { optionalTimestampSchema, timestampSchema } from '../utils/timestamp';
import { logBaseSchema } from './base';
import { gptResponseMixin } from './utils/gpt';

export const questionDataSchema = yup.object({
  idValue: yup.string(), // This is if the answer is an id
  numericValue: yup.number(), // ... or a number
  stringValue: yup.string().required(), // This is a string representation of the value
  label: yup.string(),
  color: yup.string(),
  unit: yup.string().required(),
  setAt: timestampSchema,
  ...setbackThresholdMixin,
});
export type QuestionDataValue = yup.InferType<typeof questionDataSchema>;

export const questionsLogSchema = logBaseSchema('questions').shape({
  questionsById: objectOf(questionSchema),
  questionData: optionalObjectOf(questionDataSchema),
  submittedAt: optionalTimestampSchema,
  isDebrief: yup.boolean(),
  followedUpQuestionIds: optionalStringArray,
  ...gptResponseMixin, // These logs can be generated by OpenAI
});

export type QuestionsLogValue = yup.InferType<typeof questionsLogSchema>;
