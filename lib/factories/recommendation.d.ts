import * as Factory from 'factory.ts';
import { RecommendationValue } from '../schema';
import { TimestampLike } from '../utils/TimestampLike';
export declare const makeRecommendationFactory: (TimestampKlass: typeof TimestampLike) => Factory.Sync.Factory<RecommendationValue, "createdAt" | "updatedAt" | "uid" | "ordinal" | "title" | "tacticIds" | "tacticsById" | "routine" | "routineExplanation" | "recommenderUid" | "recommenderName" | "appliedAt" | "dismissedAt" | "property" | "ruleId" | "patternIds">;
export declare const makeExistingRoutineRecommendationFactory: (TimestampKlass: typeof TimestampLike) => Factory.Sync.Factory<RecommendationValue, "createdAt" | "updatedAt" | "uid" | "ordinal" | "title" | "tacticIds" | "tacticsById" | "routine" | "routineExplanation" | "recommenderUid" | "recommenderName" | "appliedAt" | "dismissedAt" | "property" | "ruleId" | "patternIds">;
export declare const makeNewRoutineRecommendationFactory: (TimestampKlass: typeof TimestampLike) => Factory.Sync.Factory<RecommendationValue, "createdAt" | "updatedAt" | "uid" | "ordinal" | "title" | "tacticIds" | "tacticsById" | "routine" | "routineExplanation" | "recommenderUid" | "recommenderName" | "appliedAt" | "dismissedAt" | "property" | "ruleId" | "patternIds">;
