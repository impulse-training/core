import * as Factory from 'factory.ts';
import { ImpulseDebriefRecommendationValue, ImpulseRecommendationValue, LocationRecommendationValue, TimeRecommendationValue } from '../schema';
import { TimestampLike } from '../utils/TimestampLike';
export declare const makeImpulseRecommendationFactory: (TimestampKlass: typeof TimestampLike) => Factory.Sync.Factory<ImpulseRecommendationValue, "createdAt" | "updatedAt" | "uid" | "ordinal" | "title" | "type" | "tacticIds" | "tacticsById" | "explanation" | "recommenderUid" | "recommenderName" | "appliedAt" | "dismissedAt" | "ruleId" | "patternIds">;
export declare const makeImpulseDebriefRecommendationFactory: (TimestampKlass: typeof TimestampLike) => Factory.Sync.Factory<ImpulseDebriefRecommendationValue, "createdAt" | "updatedAt" | "uid" | "ordinal" | "title" | "type" | "tacticIds" | "tacticsById" | "explanation" | "recommenderUid" | "recommenderName" | "appliedAt" | "dismissedAt" | "ruleId" | "patternIds">;
export declare const makeTimeRecommendationFactory: (TimestampKlass: typeof TimestampLike) => Factory.Sync.Factory<TimeRecommendationValue, "createdAt" | "updatedAt" | "uid" | "ordinal" | "title" | "type" | "tacticIds" | "tacticsById" | "time" | "explanation" | "recommenderUid" | "recommenderName" | "appliedAt" | "dismissedAt" | "ruleId">;
export declare const makeLocationRecommendationFactory: (TimestampKlass: typeof TimestampLike) => Factory.Sync.Factory<LocationRecommendationValue, "createdAt" | "updatedAt" | "uid" | "ordinal" | "title" | "type" | "tacticIds" | "tacticsById" | "locationKey" | "explanation" | "recommenderUid" | "recommenderName" | "appliedAt" | "dismissedAt" | "ruleId">;
