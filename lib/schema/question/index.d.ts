import * as yup from 'yup';
import { CounterQuestionValue } from './counter';
import { IssueQuestionValue } from './issue';
import { MultipleChoiceQuestionValue } from './multipleChoice';
import { ScaleOf1To10QuestionValue } from './scaleOf1To10';
import { TimeQuestionValue } from './time';
export * from './base';
export * from './counter';
export * from './issue';
export * from './multipleChoice';
export * from './scaleOf1To10';
export * from './time';
export * from './utils/guards';
export declare const questionSchemas: Record<QuestionValue['type'], yup.ObjectSchema<QuestionValue>>;
export declare const questionSchema: yup.Lazy<ValidatedQuestion, yup.AnyObject, any>;
type ValidatedQuestion = {
    [K in QuestionValue['type']]: yup.InferType<(typeof questionSchemas)[K]>;
}[QuestionValue['type']];
export type QuestionValue = ScaleOf1To10QuestionValue | TimeQuestionValue | CounterQuestionValue | MultipleChoiceQuestionValue | IssueQuestionValue;
export type QuestionKeyType = QuestionValue['type'];
