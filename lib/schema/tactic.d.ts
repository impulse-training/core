import * as yup from 'yup';
export type NonRecursiveTactic = Exclude<TacticValue, FolderTacticValue | RecapTacticValue>;
export declare const folderTacticSchema: yup.ObjectSchema<{
    type: "folder";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
    tacticIds: string[];
    suggestedTacticIds: string[] | undefined;
    currentTacticIndex: number;
    tacticsById: {};
    autogenerate: boolean | undefined;
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
    tacticIds: "";
    suggestedTacticIds: "";
    currentTacticIndex: undefined;
    tacticsById: {};
    autogenerate: undefined;
}, "">;
export type FolderTacticValue = Omit<yup.InferType<typeof folderTacticSchema>, 'tacticsById'> & {
    tacticsById: Record<string, NonRecursiveTactic>;
};
export declare const recapTacticSchema: yup.ObjectSchema<{
    type: "recap";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
    tacticId: string;
    tacticsById: {};
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
    tacticId: undefined;
    tacticsById: {};
}, "">;
export type RecapTacticValue = Omit<yup.InferType<typeof recapTacticSchema>, 'tacticsById'> & {
    tacticsById: Record<string, NonRecursiveTactic>;
};
export declare const stepsTacticSchema: yup.ObjectSchema<{
    type: "steps";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
    steps: number;
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
    steps: undefined;
}, "">;
export type StepsTacticValue = yup.InferType<typeof stepsTacticSchema>;
export declare const emotionsTacticSchema: yup.ObjectSchema<{
    type: "emotions";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
}, "">;
export type EmotionsTacticValue = yup.InferType<typeof emotionsTacticSchema>;
export declare const audioTacticSchema: yup.ObjectSchema<{
    type: "audio";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
    recording: {
        waveform?: string | null | undefined;
        localFilePath: string;
        remoteFilePath: string;
    };
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
    recording: {
        localFilePath: undefined;
        remoteFilePath: undefined;
        waveform: undefined;
    };
}, "">;
export type AudioTacticValue = yup.InferType<typeof audioTacticSchema>;
export declare const videoTacticSchema: yup.ObjectSchema<{
    type: "video";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
    video: {
        storagePath?: string | null | undefined;
        url?: string | null | undefined;
        title: string;
        description: string;
        thumbnailUrl: string;
        duration: number;
    };
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
    video: {
        url: undefined;
        storagePath: undefined;
        title: undefined;
        description: undefined;
        thumbnailUrl: undefined;
        duration: undefined;
    };
}, "">;
export type VideoTacticValue = yup.InferType<typeof videoTacticSchema>;
export declare const measureSliderTacticSchema: yup.ObjectSchema<{
    type: "measure-slider";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
    lowEmoji: yup.Maybe<string | undefined>;
    highEmoji: yup.Maybe<string | undefined>;
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
    lowEmoji: undefined;
    highEmoji: undefined;
}, "">;
export type MeasureSliderTacticValue = yup.InferType<typeof measureSliderTacticSchema>;
export declare const measureTimeTacticSchema: yup.ObjectSchema<{
    type: "measure-time";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
}, "">;
export type MeasureTimeTacticValue = yup.InferType<typeof measureTimeTacticSchema>;
export declare const measureCounterTacticSchema: yup.ObjectSchema<{
    type: "measure-counter";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
}, "">;
export type MeasureCounterTacticValue = yup.InferType<typeof measureCounterTacticSchema>;
export type MeasureTacticValue = MeasureSliderTacticValue | MeasureTimeTacticValue | MeasureCounterTacticValue;
export declare const phoneTacticSchema: yup.ObjectSchema<{
    type: "phone";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
    supportGroupId: string;
    trigger: {};
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
    supportGroupId: undefined;
    trigger: undefined;
}, "">;
export type PhoneTacticValue = yup.InferType<typeof phoneTacticSchema>;
export declare const breatheTacticSchema: yup.ObjectSchema<{
    type: "breathe";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
    inFor: number;
    holdFor: number;
    outFor: number;
    repeat: yup.Maybe<number | undefined>;
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
    inFor: undefined;
    holdFor: undefined;
    outFor: undefined;
    repeat: undefined;
}, "">;
export type BreatheTacticValue = yup.InferType<typeof breatheTacticSchema>;
export declare const urgeSurfingTacticSchema: yup.ObjectSchema<{
    type: "urge-surfing";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
}, "">;
export type UrgeSurfingTacticValue = yup.InferType<typeof urgeSurfingTacticSchema>;
export declare const taskTacticSchema: yup.ObjectSchema<{
    type: "task";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
}, "">;
export type TaskTacticValue = yup.InferType<typeof taskTacticSchema>;
export declare const questionTacticSchema: yup.ObjectSchema<{
    type: "question";
    uid: string | null | undefined;
    sourceId: string | undefined;
    createdAt: import("..").TimestampLike | yup.Maybe<null>;
    updatedAt: import("..").TimestampLike | yup.Maybe<null>;
    title: string;
    subtitle: yup.Maybe<string | undefined>;
    description: string | null | undefined;
    image: {
        localFilePath?: yup.Maybe<string | undefined>;
        storagePath?: yup.Maybe<string | undefined>;
        uri?: yup.Maybe<string | undefined>;
    } | null | undefined;
    backgroundColor: string;
    isTemplate: boolean | null | undefined;
    language: string | null | undefined;
    href: string | null | undefined;
    categoryIds: (string | undefined)[] | null | undefined;
    isShared: boolean | null | undefined;
    isResponseRequired: boolean | null | undefined;
    timerSeconds: yup.Maybe<number | undefined>;
    isAvailableForRecommendation: boolean | null | undefined;
    numberOfLikes: number | null | undefined;
    isSuggested: boolean | undefined;
}, yup.AnyObject, {
    type: undefined;
    uid: undefined;
    sourceId: undefined;
    createdAt: undefined;
    updatedAt: undefined;
    title: undefined;
    subtitle: undefined;
    description: undefined;
    image: {
        localFilePath: undefined;
        storagePath: undefined;
        uri: undefined;
    };
    backgroundColor: undefined;
    isTemplate: undefined;
    language: undefined;
    href: undefined;
    categoryIds: "";
    isShared: undefined;
    isResponseRequired: undefined;
    timerSeconds: undefined;
    isAvailableForRecommendation: undefined;
    numberOfLikes: undefined;
    isSuggested: undefined;
}, "">;
export type QuestionTacticValue = yup.InferType<typeof questionTacticSchema>;
export type TacticValue = PhoneTacticValue | AudioTacticValue | UrgeSurfingTacticValue | VideoTacticValue | QuestionTacticValue | TaskTacticValue | MeasureTacticValue | FolderTacticValue | BreatheTacticValue | StepsTacticValue | EmotionsTacticValue | RecapTacticValue;
export declare const tacticSchemas: Record<TacticValue['type'], yup.ObjectSchema<TacticValue>>;
export declare const tacticSchema: yup.Lazy<ValidatedTactic, yup.AnyObject, any>;
type ValidatedTactic = {
    [K in TacticValue['type']]: yup.InferType<(typeof tacticSchemas)[K]>;
}[TacticValue['type']];
export declare const tacticColors: string[];
export declare const isStepsTactic: ({ type }: TacticValue) => boolean;
export declare const isEmotionsTactic: ({ type }: TacticValue) => boolean;
export declare const isAudioTactic: ({ type }: TacticValue) => boolean;
export declare const isVideoTactic: ({ type }: TacticValue) => boolean;
export declare const isMeasureSliderTactic: ({ type }: TacticValue) => boolean;
export declare const isMeasureTimeTactic: ({ type }: TacticValue) => boolean;
export declare const isFolderTactic: ({ type }: TacticValue) => boolean;
export declare const isMeasureCounterTactic: ({ type }: TacticValue) => boolean;
export declare const isPhoneTacticValue: ({ type }: TacticValue) => boolean;
export declare const isBreatheTactic: ({ type }: TacticValue) => boolean;
export declare const isTaskTactic: ({ type }: TacticValue) => boolean;
export declare const isQuestionTactic: ({ type }: TacticValue) => boolean;
export declare const isRecapTactic: ({ type }: TacticValue) => boolean;
export type WithTacticsById<T, TT = TacticValue> = Omit<T, 'tacticsById'> & {
    tacticsById: Record<string, TT>;
};
export {};
